name: workflow

on:
    push:
        branches:
            - main
        paths-ignore:
            - README.md

jobs:
    integration:
        name: Continuous Integration
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3
            
            - name: Lint code
              run: echo "Linting repository"

            - name: Run unit tests
              run: echo "Running unit tests"

    build-and-push-ecr-image:
        name: Continuous Delivery
        needs: integration
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v3
            
            - name: Install utilities
              run: |
                sudo apt-get update
                sudo apt-get install -y jq unzip

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: eu-north-1
                 
            - name: Login to Amazon ECR  
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: networksecurity
                IMAGE_TAG: latest
              run: |
                # Build the Docker image 
                docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
                
                # Tag the Docker image with the ECR registry and repository
                docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                
                # Push the Docker image to Amazon ECR
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                
                echo "Image $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG pushed successfully."

    continuous-deployment:
        name: Continuous Deployment
        needs: build-and-push-ecr-image
        runs-on: self-hosted

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: eu-north-1

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Pull latest image
              env:
                ECR_REPOSITORY: networksecurity
                ECR_REGISTRY: 058264176808.dkr.ecr.eu-north-1.amazonaws.com
              run: |
                docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest
                echo "Pulled latest image: $ECR_REGISTRY/$ECR_REPOSITORY:latest"

            - name: Run Docker container
              env:
                ECR_REPOSITORY: networksecurity
                ECR_REGISTRY: 058264176808.dkr.ecr.eu-north-1.amazonaws.com
              run: |
                # Stop and remove the previous container if it exists
                docker ps -q --filter "name=networksecurity-container" | xargs -r docker stop
                docker ps -aq --filter "name=networksecurity-container" | xargs -r docker rm
                
                # Run the new container
                docker run -d --name networksecurity-container -p 80:80 $ECR_REGISTRY/$ECR_REPOSITORY:latest
                echo "Running container: networksecurity-container"

            - name: Cleanup Old Images
              run: |
                # Remove unused Docker images
                docker image prune -f
                echo "Cleaned up unused Docker images."
